{"version":3,"sources":["Components/Styles.js","Components/Themes.js","Components/TopAppBar.jsx","Components/Bar.jsx","Components/BarContainer.jsx","Algorithms/BubbleSort.jsx","Components/BotAppBar.jsx","Components/BasePage.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","btmAppBar","top","bottom","btnContainer","marginLeft","spacing","generateBtn","color","sortBtn","navTitleContainer","iconButton","marginRight","icon","fontSize","sliderLabel","marginTop","controls","display","justify","alignItems","sliderContainer","title","divider","backgroundColor","palette","secondary","dark","createMuiTheme","primary","main","text","TopAppBar","props","classes","ThemeProvider","AppBar","position","Toolbar","Grid","container","item","Box","Typography","variant","className","Divider","orientation","flexItem","Button","onClick","setArray","arrayGenerator","arrayLength","setPaused","setStep","setRefs","createRefs","resetBars","refs","ButtonGroup","setSort","bar","height","barHeight","width","barWidth","barMargin","transition","Bar","React","forwardRef","ref","currRef","index","id","BarContainer","justifyContent","numArray","map","num","key","origBubblePositions","numArrayLen","lowest","i","current","getBoundingClientRect","x","origPositions","BotAppBar","xs","align","Slider","defaultValue","step","min","max","onChange","event","value","setAniSpeed","paused","setSkipForward","arrayLen","randNum","Math","floor","random","push","createRef","style","transform","BasePage","useState","currStep","skipForward","aniSpeed","useEffect","interval","swaps","numArrayCopy","JSON","parse","stringify","len","length","j","temp","BubbleSort","clearInterval","setInterval","allPositions","positionsArray","positions","swap","bar1Pos","bar2Pos","BubblePositions","prevSwap","bar1","bar2","translateX1Amt","translateX2Amt","light","sortAnimation","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd84af93.chunk.js","sourcesContent":["import makeStyles from '@material-ui/core/styles/makeStyles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // backgroundColor: '#008B8B',\r\n    },\r\n    btmAppBar: {\r\n        top: 'auto',\r\n        bottom: 0,\r\n    },\r\n    btnContainer: {\r\n        marginLeft: theme.spacing(3),\r\n    },\r\n    generateBtn: {\r\n        color: 'white',\r\n        marginLeft: '10px',\r\n    },\r\n    sortBtn: {\r\n        color: 'white',\r\n        // marginTop: '2px',\r\n    },\r\n    navTitleContainer: {\r\n        marginLeft: 'auto'\r\n    },\r\n    iconButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    icon: {\r\n        fontSize: 30,\r\n    },\r\n    sliderLabel: {\r\n        marginTop: '10px',\r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justify: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    sliderContainer: {\r\n    },\r\n    title: {\r\n    },\r\n    divider: {\r\n        backgroundColor: theme.palette.secondary.dark,\r\n        marginLeft: '10px',\r\n    },\r\n}));\r\n\r\nexport default useStyles","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#212121',\r\n        },\r\n        secondary: {\r\n            main: '#e91e63',\r\n        },\r\n        text: {\r\n            primary: '#ffffff',\r\n        }\r\n    }\r\n})\r\n\r\nexport default theme","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\nimport useStyles from './Styles'\r\nimport theme from './Themes'\r\n\r\nfunction TopAppBar(props) {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    <Grid \r\n                        container\r\n                        alignItems='center'\r\n                        justify='space-between'\r\n                    >\r\n                        <Grid item>\r\n                            <Box display='flex'>\r\n                                <Typography variant=\"h5\" className={classes.title} color='textPrimary'>\r\n                                    Sorting Stepper\r\n                                </Typography>\r\n                                <Divider orientation=\"vertical\" flexItem className={classes.divider} variant='fullWidth' />\r\n                                <Button\r\n                                    className={classes.generateBtn}\r\n                                    color='secondary' \r\n                                    onClick={ () => {\r\n                                        props.setArray(props.arrayGenerator(props.arrayLength))\r\n                                        props.setPaused(true)\r\n                                        props.setStep(0)\r\n                                        props.setRefs(props.createRefs())\r\n                                        props.resetBars(props.refs)\r\n                                    }}>\r\n                                    Generate Array\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                        <ButtonGroup className={classes.btnContainer} variant='text' color='secondary'>\r\n                            <Button \r\n                                className={classes.sortBtn}\r\n                                onClick={ () => {\r\n                                    props.setSort()\r\n                                    props.setPaused()\r\n                                }}\r\n                            >\r\n                                Bubble Sort\r\n                            </Button>\r\n                            <Button \r\n                                className={classes.sortBtn} \r\n                            >\r\n                                Selection Sort\r\n                            </Button>\r\n                            <Button \r\n                                className={classes.sortBtn} \r\n                            >\r\n                                Merge Sort\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Toolbar />\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default TopAppBar\r\n\r\n// {/* <AppBar position=\"fixed\">\r\n//                     <Toolbar>\r\n//                         <Grid \r\n//                             container\r\n//                             alignItems='center'\r\n//                             justify='space-between'\r\n//                         >\r\n//                             <Grid item>\r\n//                                 <Box display='flex'>\r\n//                                     <Typography variant=\"h5\" className={classes.title} color='textPrimary'>\r\n//                                         Sorting Stepper\r\n//                                     </Typography>\r\n//                                     <Divider orientation=\"vertical\" flexItem className={classes.divider} variant='fullWidth' />\r\n//                                     <Button\r\n//                                         className={classes.generateBtn}\r\n//                                         color='secondary' \r\n//                                         onClick={ () => {\r\n//                                             setArray(arrayGenerator(ARRAY_LENGTH))\r\n//                                             setPaused(true)\r\n//                                             setStep(0)\r\n//                                             setRefs(createRefs())\r\n//                                             resetBars(refs)\r\n//                                         }}>\r\n//                                         Generate Array\r\n//                                     </Button>\r\n//                                 </Box>\r\n//                             </Grid>\r\n//                             <ButtonGroup className={classes.btnContainer} variant='text' color='secondary'>\r\n//                                 <Button \r\n//                                     className={classes.sortBtn}\r\n//                                     onClick={ () => {\r\n//                                         setSort('bubble')\r\n//                                         setPaused(false)\r\n//                                     }}\r\n//                                 >\r\n//                                     Bubble Sort\r\n//                                 </Button>\r\n//                                 <Button \r\n//                                     className={classes.sortBtn} \r\n//                                 >\r\n//                                     Selection Sort\r\n//                                 </Button>\r\n//                                 <Button \r\n//                                     className={classes.sortBtn} \r\n//                                 >\r\n//                                     Merge Sort\r\n//                                 </Button>\r\n//                             </ButtonGroup>\r\n//                         </Grid>\r\n//                     </Toolbar>\r\n//                 </AppBar>\r\n//                 <Toolbar /> */}","import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    bar: {\r\n        height: props => `${props.barHeight}px`,\r\n        width: props => `${props.barWidth}px`,\r\n        marginLeft: props => `${props.barMargin}px`,\r\n        backgroundColor: 'black',\r\n        transition: 'transform 0.5s ease-in, color 1s ease-in',\r\n    },\r\n}));\r\n\r\nconst Bar = React.forwardRef((props, ref) => {\r\n    const classes = useStyles(props)\r\n    const currRef = ref[props.index]\r\n\r\n    return(\r\n        <div className={classes.bar} id={props.id} ref={currRef}></div>\r\n    )\r\n})\r\n\r\nexport default Bar\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport Bar from './Bar'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // backgroundColor: '#008B8B',\r\n    },\r\n}));\r\n\r\nfunction BarContainer(props) {\r\n    const classes = useStyles()\r\n\r\n    return(\r\n        <Box className={classes.root} display='flex' justifyContent='center'>\r\n            {props.numArray.map((num, index) => (\r\n                <Bar \r\n                    barHeight={num.num * 10}\r\n                    barWidth={props.barWidth}\r\n                    barMargin={props.barMargin}\r\n                    key={index} \r\n                    id={`bar-${index}`} \r\n                    ref={props.refs} \r\n                    index={index}>\r\n                </Bar>\r\n            ))}\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default BarContainer\r\n","// function sleep(ms) {\r\n//     return new Promise(resolve => setTimeout(resolve, ms));\r\n// }\r\n\r\n// function BubbleSwaps(refs, swaps, numArrayLen, currStep) {\r\n//     console.log('Swapping')\r\n\r\n//     let positions = {}\r\n//     let origPositions = {}\r\n//     for (let i = 0; i < numArrayLen; i++) {\r\n//         positions[i] = refs[i].current.getBoundingClientRect().x\r\n//         origPositions[i] = refs[i].current.getBoundingClientRect().x\r\n//     }\r\n\r\n//     const translations = []\r\n//     for (let i = 0; i < swaps.length; i++) {\r\n//         const swap = swaps[i]\r\n//         const bar1 = refs[swap[0].index].current\r\n//         const bar2 = refs[swap[1].index].current\r\n\r\n//         const bar1Pos = positions[swap[0].index]\r\n//         const bar2Pos = positions[swap[1].index]\r\n//         const bar1OrigPos = origPositions[swap[0].index]\r\n//         const bar2OrigPos = origPositions[swap[1].index]\r\n\r\n//         const translateX1Amt = bar2Pos - bar1OrigPos\r\n//         const translateX2Amt = bar1Pos - bar2OrigPos\r\n//         // bar1.style.transform = `translateX(${translateX1Amt}px)`\r\n//         // bar2.style.transform = `translateX(${translateX2Amt}px)`\r\n\r\n//         // translations.push({\r\n//         //     'bar1': {'index': swap[0].index, 'x': translateX1Amt },\r\n//         //     'bar2': {'index': swap[1].index, 'x': translateX2Amt },\r\n//         // })\r\n//         translations.push({\r\n//             'bar1': {'ref': bar1, 'translation': `translateX(${translateX1Amt}px)`},\r\n//             'bar2': {'ref': bar2, 'translation': `translateX(${translateX2Amt}px)`},\r\n//         })\r\n\r\n//         positions[swap[0].index] = bar2Pos\r\n//         positions[swap[1].index] = bar1Pos\r\n//         // await sleep(550)\r\n//     }\r\n//     return translations\r\n// }\r\n\r\nfunction origBubblePositions(refs, numArrayLen, barWidth, barMargin) {\r\n    let lowest = 10000\r\n    for (let i = 0; i < numArrayLen; i++) {\r\n        const position = refs[i].current.getBoundingClientRect().x\r\n        if (position < lowest) {\r\n            lowest = position\r\n        }\r\n    }\r\n\r\n    let origPositions = {}\r\n    for (let i = 0; i < numArrayLen; i++) {\r\n        origPositions[i] = lowest + i * (barWidth + barMargin)\r\n    }\r\n    return origPositions\r\n}\r\n\r\nfunction BubblePositions(refs, swaps, numArrayLen, barWidth, barMargin) {\r\n    const positionsArray = []\r\n    const positions = origBubblePositions(refs, numArrayLen, barWidth, barMargin)\r\n    const origPositions = origBubblePositions(refs, numArrayLen, barWidth, barMargin)\r\n    positionsArray.push(origPositions)\r\n\r\n    for (let i = 0; i < swaps.length; i++) {\r\n        const swap = swaps[i]\r\n\r\n        const bar1Pos = positions[swap[0].index]\r\n        const bar2Pos = positions[swap[1].index]\r\n\r\n        positions[swap[0].index] = bar2Pos\r\n        positions[swap[1].index] = bar1Pos\r\n\r\n        positionsArray.push(JSON.parse(JSON.stringify(positions)))\r\n        // positionsArray.push(positions)\r\n    }\r\n\r\n    return {'origPositions': origPositions, 'positions': positionsArray}\r\n}\r\n\r\nfunction BubbleSort(numArray) {\r\n    const numArrayCopy = JSON.parse(JSON.stringify(numArray))\r\n    const len = numArrayCopy.length\r\n    const swaps = []\r\n    for (let i = 0; i < len; i++) {\r\n        for (let j = 0; j < len - i - 1; j++) {\r\n            if (numArrayCopy[j].num > numArrayCopy[j + 1].num) {\r\n                swaps.push([numArrayCopy[j], numArrayCopy[j + 1]])\r\n                const temp = numArrayCopy[j]\r\n                numArrayCopy[j] = numArrayCopy[j + 1]\r\n                numArrayCopy[j + 1] = temp\r\n            }\r\n        }\r\n    }\r\n    return swaps\r\n    // return BubbleSwaps(refs, swaps, numArrayCopy.length)\r\n}\r\n\r\nexport {\r\n    BubbleSort,\r\n    BubblePositions\r\n}","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\n\r\nimport useStyles from './Styles'\r\nimport theme from './Themes'\r\n\r\nfunction BotAppBar(props) {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <AppBar position=\"fixed\" className={classes.btmAppBar}>\r\n                <Toolbar>\r\n                    <Grid \r\n                        container\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                    >\r\n                        <Grid item xs={1}>\r\n                            <Box className={classes.sliderContainer}>\r\n                                <Typography className={classes.sliderLabel} align='left' variant='body1' color='textPrimary'>\r\n                                    Animation Speed\r\n                                </Typography>\r\n                                <Slider\r\n                                    color='secondary'\r\n                                    defaultValue={550}\r\n                                    step={50}\r\n                                    min={200}\r\n                                    max={900}\r\n                                    onChange={ (event, value) => {props.setAniSpeed(-(value - 550) + 550)}}\r\n                                />\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={1}>\r\n                            <ButtonGroup className={classes.controls}>\r\n                                <Button\r\n                                    color='secondary' \r\n                                    onClick={ () => {props.setPaused(!props.paused)} }\r\n                                    variant='text'\r\n                                >\r\n                                    <SkipPreviousIcon className={classes.icon}/>\r\n                                </Button>\r\n                                <Button\r\n                                    color='secondary' \r\n                                    onClick={ () => {props.setPaused(!props.paused)} }\r\n                                    variant='text'\r\n                                >\r\n                                    {props.paused ? <PlayArrowIcon className={classes.icon}/> : <PauseIcon className={classes.icon}/>}\r\n                                </Button>\r\n                                <Button\r\n                                    color='secondary' \r\n                                    onClick={ () => {props.setSkipForward(true); props.setPaused(false)} }\r\n                                    variant='text'\r\n                                >\r\n                                    <SkipNextIcon className={classes.icon}/>\r\n                                </Button>\r\n                            </ButtonGroup>\r\n                        </Grid>\r\n                        <Grid item xs={1} />\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Toolbar />\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default BotAppBar\r\n\r\n// {/* <AppBar position=\"fixed\" className={classes.btmAppBar}>\r\n//                     <Toolbar>\r\n//                         <Grid \r\n//                             container\r\n//                             justify='space-between'\r\n//                             alignItems='center'\r\n//                         >\r\n//                             <Grid item xs={1}>\r\n//                                 <Box className={classes.sliderContainer}>\r\n//                                     <Typography className={classes.sliderLabel} align='left' variant='h6' color='textPrimary'>\r\n//                                         Animation Speed\r\n//                                     </Typography>\r\n//                                     <Slider\r\n//                                         color='secondary'\r\n//                                         defaultValue={550}\r\n//                                         step={50}\r\n//                                         min={200}\r\n//                                         max={900}\r\n//                                         onChange={ (event, value) => {setAniSpeed(-(value - 550) + 550)}}\r\n//                                     />\r\n//                                 </Box>\r\n//                             </Grid>\r\n//                             <Grid item xs={1}>\r\n//                                 <ButtonGroup className={classes.controls}>\r\n//                                     <Button\r\n//                                         color='secondary' \r\n//                                         onClick={ () => {setPaused(!paused)} }\r\n//                                         variant='text'\r\n//                                     >\r\n//                                         <SkipPreviousIcon className={classes.icon}/>\r\n//                                     </Button>\r\n//                                     <Button\r\n//                                         color='secondary' \r\n//                                         onClick={ () => {setPaused(!paused)} }\r\n//                                         variant='text'\r\n//                                     >\r\n//                                         {paused ? <PlayArrowIcon className={classes.icon}/> : <PauseIcon className={classes.icon}/>}\r\n//                                     </Button>\r\n//                                     <Button\r\n//                                         color='secondary' \r\n//                                         onClick={ () => {setSkipForward(true); setPaused(false)} }\r\n//                                         variant='text'\r\n//                                     >\r\n//                                         <SkipNextIcon className={classes.icon}/>\r\n//                                     </Button>\r\n//                                 </ButtonGroup>\r\n//                             </Grid>\r\n//                             <Grid item xs={1} />\r\n//                         </Grid>\r\n//                     </Toolbar>\r\n//                 </AppBar>\r\n//                 <Toolbar /> */}","import React, { createRef, useEffect } from 'react';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Box from '@material-ui/core/Box';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nimport useStyles from './Styles'\r\nimport theme from './Themes'\r\nimport TopAppBar from './TopAppBar'\r\nimport BarContainer from './BarContainer'\r\nimport {BubbleSort, BubblePositions} from '../Algorithms/BubbleSort';\r\nimport BotAppBar from './BotAppBar';\r\n\r\nconst ARRAY_LENGTH = 10\r\nconst BAR_WIDTH = 50\r\nconst BAR_MARGIN = 2\r\n\r\nfunction arrayGenerator(arrayLen) {\r\n    const numArray = []\r\n    for (let i = 0; i < arrayLen; i++) {\r\n        const randNum = Math.floor(Math.random() * 50) + 1\r\n        numArray.push({\r\n            'index': i,\r\n            'num': randNum,\r\n        })\r\n    }\r\n    return numArray\r\n}\r\n\r\nfunction createRefs() {\r\n    const refs = {}\r\n    for (let i = 0; i < ARRAY_LENGTH; i++) {\r\n        refs[i] = createRef()\r\n    }\r\n    return refs\r\n}\r\n\r\nfunction resetBars(refs) {\r\n    for (let i = 0; i < ARRAY_LENGTH; i++) {\r\n        const ref = refs[i]\r\n        const bar = ref.current\r\n        bar.style.transform = 'none'\r\n        bar.style.backgroundColor = 'black'\r\n    }\r\n}\r\n\r\nfunction sortAnimation(swaps, currStep, refs, allPositions) {\r\n    if (currStep !== 0) {\r\n        const prevSwap = swaps[currStep - 1]\r\n        refs[prevSwap[0].index].current.style.backgroundColor = 'black'\r\n        refs[prevSwap[1].index].current.style.backgroundColor = 'black'\r\n    }\r\n\r\n    const positions = allPositions.positions[currStep]\r\n    const origPositions = allPositions.origPositions\r\n\r\n    const swap = swaps[currStep]\r\n    const bar1 = refs[swap[0].index].current\r\n    const bar2 = refs[swap[1].index].current\r\n\r\n    const bar1Pos = positions[swap[0].index]\r\n    const bar2Pos = positions[swap[1].index]\r\n    const bar1OrigPos = origPositions[swap[0].index]\r\n    const bar2OrigPos = origPositions[swap[1].index]\r\n\r\n    const translateX1Amt = bar2Pos - bar1OrigPos\r\n    const translateX2Amt = bar1Pos - bar2OrigPos\r\n\r\n    bar1.style.backgroundColor = theme.palette.secondary.dark\r\n    bar2.style.backgroundColor = theme.palette.secondary.light\r\n    bar1.style.transform = `translateX(${translateX1Amt}px)`\r\n    bar2.style.transform = `translateX(${translateX2Amt}px)`\r\n\r\n    if (currStep === swaps.length - 1) {\r\n        bar1.style.backgroundColor = 'black'\r\n        bar2.style.backgroundColor = 'black'\r\n    }\r\n}\r\n\r\nfunction BasePage() {\r\n    const classes = useStyles()\r\n    const [numArray, setArray] = React.useState(arrayGenerator(ARRAY_LENGTH))\r\n    const [paused, setPaused] = React.useState(true)\r\n    const [currStep, setStep] = React.useState(0)\r\n    const [sort, setSort] = React.useState('bubble')\r\n    const [skipForward, setSkipForward] = React.useState(false)\r\n    const [refs, setRefs] = React.useState(createRefs())\r\n    const [aniSpeed, setAniSpeed] = React.useState(550)\r\n    \r\n    useEffect(() => {\r\n        let interval = null\r\n        const swaps = BubbleSort(numArray)\r\n        if (currStep >= swaps.length) setPaused(true)\r\n        if (!paused) {\r\n            interval = setInterval(() => {\r\n                const allPositions = BubblePositions(refs, swaps, numArray.length, BAR_WIDTH, BAR_MARGIN)\r\n                sortAnimation(swaps, currStep, refs, allPositions)\r\n                setStep(currStep => currStep + 1)\r\n                if (skipForward) {\r\n                    setPaused(true)\r\n                    setSkipForward(false)\r\n                }\r\n            }, aniSpeed)\r\n        } else {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval)\r\n    }, [paused, currStep, refs, numArray, aniSpeed, skipForward])\r\n\r\n    return (\r\n        <Box className={classes.root}>\r\n            <ThemeProvider theme={theme}>\r\n                <TopAppBar\r\n                    arrayLength={ARRAY_LENGTH}\r\n                    arrayGenerator={arrayGenerator}\r\n                    setArray={setArray}\r\n                    setPaused={setPaused}\r\n                    setStep={setStep}\r\n                    setRefs={setRefs}\r\n                    createRefs={createRefs}\r\n                    refs={refs}\r\n                    resetBars={resetBars}\r\n                    setSort={setSort}\r\n                />\r\n\r\n                <BarContainer numArray={numArray} refs={refs} barWidth={BAR_WIDTH} barMargin={BAR_MARGIN}/>\r\n\r\n                <BotAppBar \r\n                    setPaused={setPaused}\r\n                    setAniSpeed={setAniSpeed}\r\n                    setSkipForward={setSkipForward}\r\n                    paused={paused}\r\n                />\r\n            </ThemeProvider>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default BasePage;\r\n","import React from 'react';\nimport BasePage from './Components/BasePage'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BasePage></BasePage>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}